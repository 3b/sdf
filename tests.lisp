#++(ql:quickload '(sdf/test))
#++(asdf:test-system 'sdf)
(defpackage #:sdf/test
  (:use :parachute :cl)
  (:local-nicknames (:b :sdf/base)
                    (:f :sdf/ttf)
                    (:s :sdf)))
(in-package sdf/test)

(defun v= (b a)
  (and (typep b 'b:v2)
       (eql (aref a 0) (b:vx b))
       (eql (aref a 1) (b:vy b))))

(define-test v2
  ;;(fail (b:v2))
  ;;(fail (b:v2 1))
  (of-type (simple-array double-float (2)) (b:v2 1 2))
  (of-type b:v2 (b:v2 1 2))
  (is eql 1d0 (b:vx (b:v2 1 2)))
  (is eql 2d0 (b:vy (b:v2 1 2)))
  ;;(fail (b:v2 1 2 3))
  (is v= #(2d0 3d0) (b:v2- (b:v2 6 5) (b:v2 4 2)))
  (is v= #(4d0 6d0) (b:v2+ (b:v2 1 2) (b:v2 3 4)))
  (is v= #(8d0 15d0) (b:v2h* (b:v2 2 3) (b:v2 4 5)))
  (is eql -2d0 (b:v2x (b:v2 2 3) (b:v2 4 5)))
  (is eql 23d0 (b:v2. (b:v2 2 3) (b:v2 4 5)))
  (is eql 2d0 (b:v2dist (b:v2 2 3) (b:v2 4 3)))
  (is eql 3d0 (b:v2dist (b:v2 0 0) (b:v2 0 3)))
  (is eql 5d0 (b:v2dist (b:v2 2 3) (b:v2 5 7)))
  (is eql (sqrt 2d0) (b:v2mag (b:v2 1 1)))
  (is v= #(6d0 9d0) (b:v2scale (b:v2 2 3) 3d0))
  (is v= #(0.6d0 0.8d0) (b:v2n (b:v2 15 20)))
  (is v= #(-4d0 3d0) (b:v2rx (b:v2 3 4)))
  )
#++
(test 'v2)


(defun a= (aa r)
  (and (typep aa 'b::aabb)
       (v= (b:aabb-p1 aa) (first r))
       (v= (b:aabb-p2 aa) (second r))))

(defun p= (p r)
  (v= (b:p-v p) r))

(defun s= (s r)
  (and (typep s 'b::segment)
       (p= (b:s-p1 s) (first r))
       (p= (b:s-p2 s) (second r))))

(define-test geom
  (let ((a (finish (b:make-aabb))))
    (is a= '(#(0d0 0d0) #(0d0 0d0)) a)
    (finish (b:update-aabb a -1 0))
    (is a= '(#(-1d0 0d0) #(0d0 0d0)) a)
    (finish (b:update-aabb a 1 -2))
    (is a= '(#(-1d0 -2d0) #(1d0 0d0)) a)
    (finish (b:update-aabb a -2 2))
    (is a= '(#(-2d0 -2d0) #(1d0 2d0)) a)
    (finish (b:update-aabb a 0 0))
    (is a= '(#(-2d0 -2d0) #(1d0 2d0)) a)
    (finish (b:update-aabb a -3 -4))
    (is a= '(#(-3d0 -4d0) #(1d0 2d0)) a)
    (is eql -3d0 (b:aabb-x1 a))
    (is eql -4d0 (b:aabb-y1 a))
    (is eql 1d0 (b:aabb-x2 a))
    (is eql 2d0 (b:aabb-y2 a)))

  (is p= #(0d0 0d0) (b:make-point))
  (let ((p (finish (b:make-point 1 2))))
    (is p= #(1d0 2d0) p)
    (is eql 1d0 (b:p-x p))
    (is eql 2d0 (b:p-y p))
    (b:with-point (p x y)
      (is eql 1d0 x)
      (is eql 2d0 y)
      (true (b:point= p (b:make-point 1 2)))
      (false (b:point= p (b:make-point 2 1)))
      (false (b:point= p (b:make-point 1 1)))
      (false (b:point= p (b:make-point 2 2)))
      #++ ;; not mutable for now
      (progn
        (finish (setf x 3d0 y 4d0))
        (is p= #(3d0 4d0) p))))

  (let ((s (finish (b:make-segment 1 2 3 4))))
    (is p= #(1d0 2d0) (b:s-p1 s))
    (is p= #(3d0 4d0) (b:s-p2 s))
    (is eql 1d0 (b:s-x1 s))
    (is eql 2d0 (b:s-y1 s))
    (is eql 3d0 (b:s-x2 s))
    (is eql 4d0 (b:s-y2 s))
    (is s= '(#(3d0 4d0) #(5d0 6d0)) (b:make-segment/p (b:make-point 3 4)
                                                      (b:make-point 5 6))))


  )
#++
(test 'geom)
